{
  "openapi": "3.0.1",
  "info": {
    "title": "GenHMS API",
    "description": "This document provides the GenHMS Backend REST API interface.\n\nTest Server for GenHMS Backend REST API FOR SC28.\n\nhttps://hms.genyazilim.com/api\n\nDocument Change Log\n\n|   Published Date  |   Document Version Number |   Description of Revision       |\n|-------------------|---------------------------|---------------------------------|\n| 12.4.2023       | v1.0.0   | - Initial Pre-Alpha.<br/>|\n",
    "contact": {
      "name": "GenYazilim",
      "email": "info@genyazilim.com"
    }
  },
  "paths": {
    "/api/File/GetBuckets": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Retrieves a list of all available S3 buckets.",
        "description": "This endpoint retrieves a list of all available S3 buckets.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/File/CreateBucket/{bucketName}": {
      "put": {
        "tags": [
          "File"
        ],
        "summary": "Creates a new S3 bucket with the specified name.",
        "description": "This endpoint creates a new S3 bucket with the specified name.",
        "parameters": [
          {
            "name": "bucketName",
            "in": "path",
            "description": "The name of the new bucket to create.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/File/DeleteBucket/{bucketName}": {
      "delete": {
        "tags": [
          "File"
        ],
        "summary": "Deletes the specified S3 bucket.",
        "description": "This endpoint deletes the specified S3 bucket.",
        "parameters": [
          {
            "name": "bucketName",
            "in": "path",
            "description": "The name of the bucket to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/File/SharedLink/{bucketName}/{key}": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Gets a shared link for the specified object in the specified S3 bucket.",
        "description": "The endpoint is used to generate a shared link for a specified object in an S3 bucket.",
        "parameters": [
          {
            "name": "bucketName",
            "in": "path",
            "description": "The name of the bucket containing the object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "The Key of the object to generate a shared link for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/File/PutNewFile": {
      "put": {
        "tags": [
          "File"
        ],
        "summary": "Uploads a new file to the specified S3 bucket.",
        "description": "This endpoint allows for the upload of a new file to the specified S3 bucket. \r\nThe file to upload is provided in the request body as an instance of the UploadFileModel class. \r\nAdditionally, metadata can be provided as a header parameter with key \"meta\".",
        "parameters": [
          {
            "name": "meta",
            "in": "header",
            "description": "This parameter is used to additional metada Example values;\r\n            Content-Writer,\r\n            Project-Name,\r\n            OTHER",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The file to upload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadFileModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadFileModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UploadFileModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/File/GetFile/{bucketName}/{key}": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Gets a file from the specified S3 bucket.",
        "description": "This endpoint allows you to retrieve a file from a specific S3 bucket.",
        "parameters": [
          {
            "name": "bucketName",
            "in": "path",
            "description": "The name of the bucket.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "The Key of the file to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/File/DeleteFile/{bucketName}/{key}": {
      "delete": {
        "tags": [
          "File"
        ],
        "summary": "Deletes a file with the specified Key from the specified bucket.",
        "description": "This enpoint deletes a file with the specified key from the specified Amazon S3 bucket.",
        "parameters": [
          {
            "name": "bucketName",
            "in": "path",
            "description": "The name of the bucket containing the file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "The Key identifying the file within the bucket.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/File/GetObjectList/{bucketName}/{prefix}": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Retrieves a list of objects in the specified Amazon S3 bucket with the specified prefix.",
        "description": "This endpoint retrieves a list of objects from an Amazon S3 bucket that match the specified prefix. The prefix parameter is used to filter the objects to retrieve.",
        "parameters": [
          {
            "name": "bucketName",
            "in": "path",
            "description": "The name of the Amazon S3 bucket to retrieve objects from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefix",
            "in": "path",
            "description": "The prefix used to filter the objects to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of objects in the specified bucket with the specified prefix.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "If the specified bucket does not exist, returns an error message indicating that the bucket was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/File/PutAsFile/{bucketName}/{key}": {
      "put": {
        "tags": [
          "File"
        ],
        "summary": "Uploads a file to the specified Amazon S3-compatible bucket using HTTP PUT method.",
        "description": "This endpoint allows clients to upload a file to the specified Amazon S3-compatible bucket using HTTP PUT method. \r\nThe uploaded file is identified by the specified bucket name and key, and the metadata can be specified using the meta parameter.",
        "parameters": [
          {
            "name": "bucketName",
            "in": "path",
            "description": "The name of the Amazon S3-compatible bucket to upload the file to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "The key used to identify the file in the bucket.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "meta",
            "in": "header",
            "description": "This parameter is used to additional metada Example values;\r\n            Content-Writer,\r\n            Project-Name,\r\n            OTHER",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a success response if the file is successfully uploaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "404": {
            "description": "If the specified bucket does not exist, returns an error message indicating that the bucket was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Message/{systemName}/{resourceName}/{id}": {
      "post": {
        "tags": [
          "Message"
        ],
        "summary": "Sends an email.",
        "parameters": [
          {
            "name": "operation",
            "in": "header",
            "description": "Operation such as add/update/delete",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "systemName",
            "in": "path",
            "description": "Name of the service (etc. mail, sms, notification)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resourceName",
            "in": "path",
            "description": "Name of the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "JSON information about the Data that will be used to fill message template",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/JsonNode"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Mail sent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        }
      }
    },
    "/api/Message/Throw404": {
      "post": {
        "tags": [
          "Message"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Message/Throw502": {
      "post": {
        "tags": [
          "Message"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "The status property of the response.",
            "format": "int32",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "description": "The title property of the response.",
            "nullable": true,
            "readOnly": true
          },
          "responseCode": {
            "type": "integer",
            "description": "The numeric code property of the response.",
            "format": "int32",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "The property that holds the type of the error.",
            "nullable": true
          },
          "details": {
            "type": "string",
            "description": "The property that holds the details about the error.",
            "nullable": true
          },
          "traceId": {
            "type": "string",
            "description": "The property that holds the trace id of the error.",
            "format": "uuid"
          },
          "instance": {
            "type": "string",
            "description": "The property that holds the instance of the error.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This class represents an error response model, it inherits from the BaseResponseModel class and it's used to create\r\nan error response with a status code, an instance, a title, and details about the error."
      },
      "JsonNode": {
        "type": "object",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/JsonNodeOptions"
          },
          "parent": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "root": {
            "$ref": "#/components/schemas/JsonNode"
          }
        },
        "additionalProperties": false
      },
      "JsonNodeOptions": {
        "type": "object",
        "properties": {
          "propertyNameCaseInsensitive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "The status property of the response.",
            "format": "int32",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "description": "The title property of the response.",
            "nullable": true,
            "readOnly": true
          },
          "responseCode": {
            "type": "integer",
            "description": "The numeric code property of the response.",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "This class represents a success response model, it inherits from the BaseResponseModel and it's used to create a\r\nsuccess response."
      },
      "UploadFileModel": {
        "type": "object",
        "properties": {
          "bucketName": {
            "type": "string",
            "description": "Gets or sets the name of the storage bucket.",
            "nullable": true
          },
          "key": {
            "type": "string",
            "description": "Gets or sets the Key or path of the file in the storage system.",
            "nullable": true
          },
          "data": {
            "type": "string",
            "description": "Gets or sets the base64-encoded string representation of the file's binary Data.",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "description": "Gets or sets the content type of the file.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a model for uploading a file to a storage system."
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "apiKey",
        "description": "Standard Authorization header using the Bearer scheme (\"bearer {token}\")",
        "name": "Authorization",
        "in": "header"
      }
    }
  }
}